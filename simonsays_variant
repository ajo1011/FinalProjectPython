import pygame
from random import choice
from time import sleep
from turtle import *
from freegames import floor, square, vector

# Initialize pygame
pygame.init()
pygame.mixer.init()

# Load sound files with error checking
sounds = {}
tiles = {
    vector(0, 0): ('red', 'dark red'),
    vector(0, -200): ('blue', 'dark blue'),
    vector(-200, 0): ('green', 'dark green'),
    vector(-200, -200): ('yellow', 'khaki'),
}
sound_files = {
    vector(0, 0): 'simon_says/red.wav',
    vector(0, -200): 'simon_says/blue.wav',
    vector(-200, 0): 'simon_says/green.wav',
    vector(-200, -200): 'simon_says/yellow.wav',
}

for tile, file in sound_files.items():
    try:
        sounds[tile] = pygame.mixer.Sound(file)
    except Exception as e:
        print(f"Failed to load sound {file}: {e}")

pattern = []
guesses = []
score = 0  # Initialize score

def grow():
    """Grow pattern and flash tiles, update score."""
    global score
    tile = choice(list(tiles))
    pattern.append(tile)

    for tile in pattern:
        flash(tile)

    print('Pattern length:', len(pattern))
    score += 1  # Increment score
    show_score()  # Update the display
    guesses.clear()


def show_score():
# Display the current score.
    undo()  # Clear the previous score display
    penup()
    goto(0, 0)  # Position for the score display
    write(f"Score: {score}", font=('Arial', 18, 'normal'))

def grid():
    """Draw grid of tiles."""
    square(0, 0, 200, 'dark red')
    square(0, -200, 200, 'dark blue')
    square(-200, 0, 200, 'dark green')
    square(-200, -200, 200, 'khaki')
    update()

def flash(tile):
    """Flash tile in grid and play corresponding sound."""
    glow, dark = tiles[tile]
    square(tile.x, tile.y, 200, glow)
    update()
    if tile in sounds:
        sounds[tile].play()
    sleep(0.5)
    square(tile.x, tile.y, 200, dark)
    update()
    sleep(0.5)

def tap(x, y):
    """Respond to screen tap."""
    global score
    onscreenclick(None)
    x = floor(x, 200)
    y = floor(y, 200)
    tile = vector(x, y)
    index = len(guesses)

    if tile != pattern[index]:
        score = 0  # Reset score on error
        show_score()
        exit()

    guesses.append(tile)
    flash(tile)

    if len(guesses) == len(pattern):
        grow()

    onscreenclick(tap)


def start(x, y):
    """Start game."""
    grow()
    onscreenclick(tap)
# Remaining functions (grow, tap, start) remain unchanged

setup(420, 420, 370, 0)
hideturtle()
tracer(False)
grid()
show_score()  # Initial score display
onscreenclick(start)
done()
